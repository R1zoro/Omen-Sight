Omen Sight Project Summary (For Chat Continuation & Future Reference)

📌 Purpose of This Document

This document serves as a backup summary of the Omen Sight project in case the chat reaches its space limit. When starting a new chat, upload this document and mention that this file contains all project details so I can continue helping without any loss of context.

This document includes: ✔ Project Overview & File Structure✔ Future Development Plans & Enhancements✔ Sections for Current Code Implementations (without code, so you can manually add them)✔ Clear Instructions for Resuming Work in a new chat

📁 Project Overview: Omen Sight (Vulnerability Scanner)

Goal: A modular security scanner that detects SQL Injection (SQLi) and Cross-Site Scripting (XSS) vulnerabilities using static detection and live monitoring (mitmproxy).

✅ Current Features Implemented

✔ Static SQL Injection Detection (via URL & form scanning)✔ Static XSS Detection (via URL & form scanning)✔ Live Monitoring for SQLi & XSS (using mitmproxy)✔ Command-line interface (CLI) for now (GUI planned later)✔ Future Scalability: Designed to easily add more vulnerability scanners

📂 Project File Structure

Omen_Sight/
│── main.py  # Entry point for scanning
│── api/  # (Empty for now, planned for API integration)
│── logs/  # (For future logging implementation)
│── scanner/
│   ├── __init__.py  # Marks scanner as a package
│   ├── sql_injection.py  # SQLi detection
│   ├── xss.py  # XSS detection
│   ├── live_monitor.py  # Live monitoring of vulnerabilities
│── static/  # (Can be used for storing payloads or rules)
│── utils/  # (For helper functions in the future)
│── Pipfile & Pipfile.lock  # Dependency management with Pipenv

🚀 Future Enhancements Planned

🔹 Next Steps for Static Scanning

✅ Add more vulnerabilities (e.g., Broken Access Control, CSRF, Open Redirects)

✅ Improve signature-based detection (store attack patterns in external files)

✅ Implement a crawler to find URLs dynamically

🔹 Next Steps for Live Monitoring

✅ Support more vulnerabilities in live monitoring (not just SQLi/XSS)

✅ Improve logging & reporting when attacks are detected

✅ Potentially integrate AI-based anomaly detection

🔹 GUI Development (Planned After Core Features)

✅ Use PyQt6 (originally considered PyQt5 but moved to PyQt6)

✅ Design a dashboard for easier interaction (instead of CLI-only)

✅ Implement a visual representation of detected vulnerabilities

📜 Current Code Implementations

Below are the sections where you should manually insert the latest versions of your code:

🔹 main.py (Handles Input & Calls Scanners)

👉 Insert the latest `` code here

🔹 sql_injection.py (Handles SQL Injection Detection)

👉 Insert the latest `` code here

🔹 xss.py (Handles XSS Detection)

👉 Insert the latest `` code here

🔹 live_monitor.py (Handles Live Monitoring with mitmproxy)

👉 Insert the latest `` code here

📌 How to Use This Document in a New Chat

Upload this document when starting a new chat with me.

Say: "We were working on Omen Sight, a vulnerability scanner. This file has all the project details. Let's continue where we left off."

Manually add any missing code before uploading to ensure accuracy.

I will instantly regain context and resume working as if nothing changed! 🚀

📌 Final Notes

This document serves as a backup to prevent loss of critical project details.

If a new chat starts, upload this document to restore context instantly.

Ask me anytime for an updated version if new changes occur in the project!

🚀 Omen Sight Development Will Continue Smoothly! 🚀

